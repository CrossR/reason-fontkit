diff a/src/Fontkit.re b/src/Fontkit.re	(rejected hunks)
@@ -1,44 +1,87 @@
-open Reglfw;
+/* TODO this should be available via the stdlib? */
+type result('a) =
+  | Ok('a)
+  | Error(string);
 
-exception FontKitLoadFaceException(string);
-exception FontKitRenderGlyphException(string);
+module type Face = {
+  type t;
+  let load: (string, int) => result(t);
+};
+
+module Face = {
+  type t;
+
+  external fk_new_face: (string, int) => result(t) = "caml_fk_new_face";
+
+  let load = (fontFile, size) => fk_new_face(fontFile, size);
+};
 
-type fk_return('a) =
-| Success('a)
-| Error(string);
+module GlyphBitmap = {
+  type pixelMode =
+    | Mono
+    | Gray
+    | Lcd
+    | LcdV
+    | Bgra;
 
-type fk_face;
+  type t = {
+    rows: int,
+    width: int,
+    pitch: int,
+    pixelMode,
+    data:
+      Bigarray.Array2.t(int, Bigarray.int8_unsigned_elt, Bigarray.c_layout),
+  };
 
-type fk_glyph = {
-width: int,
-height: int,
-bearingX: int,
-bearingY: int,
-advance: int,
-image: Image.t
+  let getBitsPerPixel = (pixelMode: pixelMode) =>
+    switch (pixelMode) {
+    | Mono => 1
+    | Gray => 8
+    | Lcd => 8 /* Or should this be 24? */
+    | LcdV => 8 /* Also rather 24? */
+    | Bgra => 32
+    };
 };
 
-type fk_shape = {
-    codepoint: int,
-    cluster: int
+type vector = {
+  x: float,
+  y: float,
 };
 
-external fk_new_face: (string, int) => fk_return(fk_face) = "caml_fk_new_face";
-external fk_load_glyph: (fk_face, int) => fk_return(fk_glyph) = "caml_fk_load_glyph";
-external fk_shape: (fk_face, string) => array(fk_shape) = "caml_fk_shape";
+module Glyph = {
+  type metrics = {
+    width: float,
+    height: float,
+    horizontalBearingX: float,
+    horizontalBearingY: float,
+    horizontalAdvance: float,
+    verticalBearingX: float,
+    verticalBearingY: float,
+    verticalAdvance: float,
+  };
 
-let load = (fontFile, size) => {
-    let face = fk_new_face(fontFile, size);
-    switch (face) {
-    | Success(f) => f
-    | Error(msg) => raise(FontKitLoadFaceException(msg))
-    }
+  type t = {
+    face: Face.t,
+    metrics,
+    linearHorizontalAdvance: float,
+    linearVerticalAdvance: float,
+    advance: vector,
+    bitmap: GlyphBitmap.t,
+    bitmapLeft: int,
+    bitmapTop: int,
+  };
+
+  external fk_render_glyph: (Face.t, int) => result(t) =
+    "caml_fk_render_glyph";
+
+  let render = (face, size) => fk_render_glyph(face, size);
 };
 
-let renderGlyph = (face, size) => {
-    let glyph = fk_load_glyph(face, size);
-    switch (glyph) {
-    | Success(g) => g
-    | Error(msg) => raise(FontKitRenderGlyphException(msg))
-}
+type shape = {
+  codepoint: int,
+  cluster: int,
 };
+
+external fk_shape: (Face.t, string) => array(shape) = "caml_fk_shape";
+
+let shape = (face, size) => fk_shape(face, size);
\ No newline at end of file
